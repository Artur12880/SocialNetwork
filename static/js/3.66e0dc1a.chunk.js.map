{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DIalogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsConteiner.js"],"names":["module","exports","DialogItem","props","path","id","className","s","dialogs","active","to","name","Message","message","maxLenght250","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","state","dialogsPage","dialogsElements","map","d","messagesElements","messages","m","isAuth","values","sendMessage","newMessageBody","compose","connect","auntification","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,wB,kGCSnMC,EAPI,SAACC,GAChB,IAAIC,EAAO,UAAYD,EAAME,GAC7B,OACI,sBAAKC,UAAWC,IAAEC,QAAU,IAAMD,IAAEE,OAApC,cACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,OAD9B,QCFOC,EAFC,SAACT,GACb,OAAO,qBAAKG,UAAWC,IAAEC,QAAlB,SAA4BL,EAAMU,W,yCC+BvCC,EAAeC,YAAiB,KAWhCC,EAAoBC,YAAU,CAACC,KAAM,wBAAjBD,EATL,SAACd,GAClB,OAAO,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAeX,GAAeH,KAAK,iBAAiBe,YAAY,yBAE3G,8BACI,kDAIGC,EAtCC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YACdC,EAAkBF,EAAMpB,QAAQuB,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMN,GAAI2B,EAAE3B,QACzE4B,EAAmBL,EAAMM,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASR,GAAI8B,EAAE9B,QAMlF,OAAmB,IAAfF,EAAMiC,OAAuB,cAAC,IAAD,CAAU1B,GAAI,WAG3C,sBAAKJ,UAAWC,IAAEC,QAAlB,UACI,8BAAMsB,IAEN,qBAAKxB,UAAWC,IAAE2B,SAAlB,SACI,gCAAMD,EAEF,cAACjB,EAAD,CAAqBG,SAbnB,SAACkB,GACflC,EAAMmC,YAAYD,EAAOE,4B,gBCYlBC,sBAAQC,aAjBD,SAACb,GAGnB,MAAM,CACFC,YAAaD,EAAMC,YACnBO,OAAQR,EAAMc,cAAcN,WAGb,SAACO,GACpB,MAAM,CACFL,YAAa,SAACC,GAAoBI,EAASC,YAAmBL,SAODM,IAAtDL,CAAwEb","file":"static/js/3.66e0dc1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__wvnO_\",\"dialogsItems\":\"Dialogs_dialogsItems__3hpSa\",\"messages\":\"Dialogs_messages__21_Tp\",\"message\":\"Dialogs_message__1yqLX\",\"active\":\"Dialogs_active__3H0Mi\",\"item\":\"Dialogs_item__2GPl2\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nconst DialogItem = (props) => { /*логика инкабсулирована внутри этой компоненты*/\r\n    let path = '/dialog' + props.id;\r\n    return (\r\n        <div className={s.dialogs + ' ' + s.active}> {/*склеиваем два класса и пробел добавляем между нимы*/}\r\n            <NavLink to={path}>{props.name}</NavLink> {/*{/!*присутствует различие только в урл, и именах*!/}*/}\r\n        </div>)\r\n}\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nconst Message = (props) => {\r\n    return <div className={s.dialogs}>{props.message}</div>}\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DIalogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControles/FormsControles';\r\nimport { maxLengthCreator, requiredField } from '../../utilits/validators/validators';\r\nconst Dialogs = (props) => {\r\n    \r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id}/>);\r\n    \r\n    let addNewMessage=(values)=>{\r\n        props.sendMessage(values.newMessageBody)\r\n    }    \r\n\r\n    if (props.isAuth===false) return <Redirect to={'/login'}/>;\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div>{dialogsElements}</div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements} \r\n                \r\n                    <AddMessageFormRedux onSubmit={addNewMessage} />\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLenght250 = maxLengthCreator(250)\r\n\r\nconst addMessageForm=(props)=>{// создал дочернюю компоненту, респонсибилити которой заниматься коткретно сбором данных с формой \r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={[requiredField, maxLenght250]} name='newMessageBody' placeholder='Enter your message'/>\r\n            </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div></form>\r\n}\r\nconst AddMessageFormRedux=reduxForm({form: 'dialogAddMessageForm'})(addMessageForm)\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\n\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport Dialogs from './Dialogs'\r\nimport withAuthRedirect from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n/*делаю 2 фукции, которые будут вовращать обьект*/\r\nlet mapStateToProps = (state) => {\r\n    \r\n/*функция должна замапить стейт на пропсы, то-есть настраивает данные которые мы возьмём из state*/\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auntification.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch)=>{ /*настраивает кол-беки, которые мы будемотправлять  нашу презентационную компоненту*/\r\n    return{\r\n        sendMessage: (newMessageBody) => {dispatch(sendMessageCreator(newMessageBody));},\r\n        \r\n        \r\n    }\r\n}\r\n//компоус - возьми диалогс закинь в визаусредирект, потом получи результат  этот результат закинь в конект\r\n/*функция коннект создает контейнерную компоненту, рендерит презентационную компоненту, и внутрь презентационной компоненты в качестве пропсав передаёт те свойства, которые сидят в этих двух обьектах*/\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"sourceRoot":""}